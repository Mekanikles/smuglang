extern func printf;

// Use c lib
printf("Hello %s\n", "string");

printf("Hello integers %i, %i, %i\n", 1, 12, 123);

printf("Hello special integer %u, %i\n", 0xFFF16, 0b1111101);

printf("Hello floats %f, %f, %f, %f, %f\n", 1.0, 1.2, .2, .2e2, .3E2);

printf("Hello integer expressions %i, %i\n", 5 * 4 - 3 / 2, 1 + 2 * 3);

printf("Hello float expressions %f, %f\n", 5.1 * 4.4 - .33 / 2.22, 1.0 + 2.1 * .3);

printf("Hello sub expression %i\n", (5 + 4) - (3 + 2) - (((1))));

var i : int = 5;
{
	var i : int = 10;
	printf("Hello variable should be 10: %i\n", i);
}
printf("Hello variable should be 5: %i\n", i);

printf("Hello garbage forward ref: %i\n", b);
var b : int = 3;

if (b == 3)
	printf("Hello if-conditional\n");

if (b == 4)
	printf("ERROR");
else
	printf("Hello else condition\n");

if (b == 4)
	printf("ERROR");
else if (b == 5)
	printf("ERROR");
else 
{	
	if (b == 3)
		printf("Hello if-else conditional\n");
}

if (b == 3)
{
	{
		func doNoParamFunc()
		{
			localFunc();	
			func localFunc()
			{
				printf("Hello inner local function!\n");
			};
		};

		doNoParamFunc();	
	}

	doNoParamFunc();
}

doMultiParamFunc(42, 123);

func doNoParamFunc()
{
	printf("Hello outer function!\n");
};

func doMultiParamFunc(p : int, q : int)
{
	printf("Hello integer parameter 1: %i, 2: %i\n", p, q);
};

crossCallFunc1(1);

func crossCallFunc1(whatCall : int)  
{
	printf("cross call func 1 called!\n");
	if (whatCall == 1)
		crossCallFunc1(2);
	else if (whatCall == 2)
		crossCallFunc2(1);
};

func crossCallFunc2(shouldCall : int)
{
	printf("cross call func 2 called!\n");
	if (shouldCall == 1)
		crossCallFunc1(0);
};





