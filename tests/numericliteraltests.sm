def cchar = #primitives.c.char;
def cint = #primitives.c.int;
def f64 = #primitives.f64;

/*
func print(fmt : cchar*, args...) -> () 
{
	extern printf : func(fmt : cchar*, args...) -> errCode : cint;
	printf(fmt, args);
};
*/
/*
printFloat(getFloat(10.0));

func getFloat(floatArg1 : f64) -> f64
{
	return floatArg1 * 7.0 * 5.6 + 6.35 / 45.0 - 19.0 * 0.56 + 4.7;
};


func printFloat(arg : f64)
{
	printf("A float %f\n", arg);
	extern printf : func(fmt : cchar*, args : f64) -> errCode : cint;	
};
*/

func sayHello(arg : cchar*)
{
	printf("Hello %s\n", arg);
	extern printf : func(fmt : cchar*, args : cchar*) -> errCode : cint;	
};

//sayHello("World");

/*
def evalStr : cchar* = "sayHello(\"World\")";
eval(evalStr);

eval(innerValue());
*/

eval(chainedReturnValue());

func innerValue() -> cchar*
{
	return "sayHello(\"Kreti\"); sayHello(\"Pleti\")";
};

func chainedReturnValue() -> cchar*
{
	return innerValue();
};

/*
func test(fmt : cchar*, args...)
{
	extern printf : func(fmt : cchar*, args...) -> errCode : cint;
	printf(fmt, args);	
};

test("Hello %s", ("World"));
*/

/*
func test(e : #primitives.int)
{
};

var i : cint = 5;
test(i);
*/
