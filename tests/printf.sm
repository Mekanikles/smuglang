def cchar = #primitives.c.char;
def cint = #primitives.c.int;
def cuint = #primitives.c.uint;
def clong = #primitives.c.long;
def culong = #primitives.c.ulong;

def s64 = #primitives.int(64, true);
def u64 = #primitives.int(64, false);
def s32 = #primitives.int(32, true);
def u32 = #primitives.int(32, false);

func get_fmt_types(fmt : String) -> type[]
{
	var types : [256]; // TODO: implement dynamic arrays and replace return types
	var count : s32 = 0;
	var cptr : cchar* = fmt.cstr();
	while (*cptr != '\0') // TODO: Don't rely on cchar* strings for parsing chars
	{
		var c : cchar = *cptr++;
		if (c == '%')
		{
			c = *cptr++;
			if (c == 'c')
				types[count++] = cchar;
			if (c == 's')
				types[count++] = cchar*;	
			else if (c == 'i' ||Â c == 'd')
			{
				if (c == 'l')
					types[count++] = clong;
				else
					types[count++] = cint;	
			}
			else if (c == 'u')
			{
				if (c == 'l')
					types[count++] = culong;
				else
					types[count++] = cuint;	
			}
			else
			{
				// TODO: This is not possible, function is not necessarily compile-time
				//	Can this be done with error returns, or asserts instead?
				//#error("Expected c/i[l]/d/[l]/u[l] after % in format string");
			}
		}
	}
	return types[0:count];
}

// This works with generics because args are specified as a tuple.
//	Tuples can be generically handled by the typesystem.
//	fmt need to be declared "def" to ensure that its value is known
//	at compile time.
// Note: get_fmt_types must return cchar* for %s, and string arguments 
//	will have to implement that interface, leading to an implicit conversion.
func printf(def fmt : String, args : ...(get_fmt_types(fmt)))
{
	extern printf(fmt : cchar*, args...) -> err : cint;
	printf(fmt.cstr(), args);
}

func print(str : String)
{
	printf("%s", str);
}

print("Typesafe printf test!\n");
printf("Print char: %c", '0');
printf("Print int: %i", 1);
printf("Print uint: %u", 2);
printf("Print long: %il", 3);
printf("Print float: %f", 4.0f);






